@page "/login"
@inject IChangeUserService changeUserService;
@inject NavigationManager navigationManager;
@inject IGameStateClient gameStateClient;
@inject ILocalStorageService localStorageService;
@inject IGameBearerTokenProvider gameTokenProvider;
@inject ILoginService loginService;

<div class="rpgui-content">
    <div class="rpgui-container framed">
        <h3>Login</h3>
        <form @onsubmit="LoginUser" class="rpgui-container framed-grey">
            <div class="mb-3">
                <label for="inputUserId" class="form-label">
                    User ID
                </label>
                <div class="input-group has-validation">
                    @*<span class="input-group-text" id="inputGroupPrepend3">@@</span>*@
                    <input type="text" class="form-control @isInvalid()" id="inputUserId" @bind="userId" required>
                    <div id="inputUserIdFeedback" class="invalid-feedback">
                        @errorMessage
                    </div>
                </div>
            </div>
            <button type="button" class="btn btn-primary rpgui-button" @onclick="LoginUser">
                Login
            </button>
            <button type="button" class="btn btn-primary rpgui-button" @onclick="GoToNewPlayer">
                Create New Player
            </button>
        </form>
    </div>
</div>

@code {
    string? userId;
    string? errorMessage;

    async Task LoginUser()
    {
        errorMessage = null;
        if (userId is null)
        {
            errorMessage = "You cannot login with a null User ID.";
            return;
        }
        try
        {
            await loginService.LoginUser(userId);
        }
        catch (ApiException apiException)
        {
            errorMessage = apiException.SimpleMessage();
        }
        catch (Exception exception)
        {
            errorMessage = exception.Message;
        }
    }

    void GoToNewPlayer() => navigationManager.NavigateTo("/new-player");

    // https://getbootstrap.com/docs/5.0/forms/validation/#server-side
    string isInvalid() => errorMessage is not null ? "is-invalid" : "";
}
